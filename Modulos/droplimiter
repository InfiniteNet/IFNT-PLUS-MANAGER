#!/bin/bash

database="/root/usuarios.db"
log="/var/log/auth.log"
loginsukses='Password auth succeeded'

# Verificar se o arquivo de banco de dados de usuários existe
if [ ! -f "$database" ]; then
    echo "Arquivo /root/usuarios.db não encontrado"
    exit 1
fi

# Função para pegar os usuários autenticados via Dropbear
fun_drop() {
    port_dropbear=$(ps aux | grep '[d]ropbear' | awk '{print $17}' | head -n1)
    pids=$(ps ax | grep "[d]ropbear" | grep " $port_dropbear" | awk '{print $1}')
    
    for pid in $pids; do
        pidlog=$(grep $pid $log | grep "$loginsukses" | tail -n1)
        
        if [ "$pidlog" ]; then
            user=$(echo $pidlog | awk '{print $10}' | sed -r "s/'//g")
            echo "$user $pid"
        fi
    done
}

while true; do
    clear
    echo -e "\E[42;1;37m               LIMITER DROPBEAR                \E[0m"
    echo -e "\E[42;1;37m Usuário                      Conexões/Limite \E[0m"
    
    # Ler o arquivo de usuários e limites
    while read usline; do
        user=$(echo $usline | cut -d' ' -f1)
        limit=$(echo $usline | cut -d' ' -f2)
        drop_conns=$(fun_drop | grep -w "$user" | wc -l)
        
        if [ -n "$user" ]; then
            printf '  %-35s%s/%s\n' $user $drop_conns $limit
            
            # Se o usuário exceder o limite, desconectar
            if [ "$drop_conns" -gt "$limit" ]; then
                echo -e "\E[41;1;37m Usuário desconectado por ultrapassar o limite! \E[0m"
                pids=$(fun_drop | grep -w "$user" | awk '{print $2}')
                
                # Desconectar o usuário que ultrapassou o limite
                for pid in $pids; do
                    kill $pid
                    echo "Usuário $user (PID $pid) desconectado."
                done
            fi
        fi
    done < "$database"
    
    # Intervalo de 6 segundos para verificar novamente
    sleep 6
done
