#!/bin/bash
#====================================================
#	SCRIPT: CRIARUSUARIO INFINITENET PLUS MANAGER
#	DESENVOLVIDO POR:	ALVES_S.A
#	CONTATO TELEGRAM:	http://t.me/alves_s.a
#	CANAL TELEGRAM:	http://t.me/sshplus
#====================================================

# Verifica se o arquivo /etc/IP existe
if [ ! -f /etc/IP ]; then
    echo "Erro: Arquivo /etc/IP não encontrado!"
    exit 1
fi
IP=$(cat /etc/IP)

# Definições de cores
cor1='\033[41;1;37m'
cor2='\033[44;1;37m'
scor='\033[0m'

# Função para gerar arquivo client.ovpn
newclient() {
    if [ -z "$1" ]; then
        echo "Erro: nome do cliente não fornecido para a função newclient."
        return 1
    fi
    client_ovpn="$HOME/$1.ovpn"
    cp /etc/openvpn/client-common.txt "$client_ovpn"
    {
        echo "<ca>"
        cat /etc/openvpn/easy-rsa/pki/ca.crt
        echo "</ca>"
        echo "<cert>"
        cat /etc/openvpn/easy-rsa/pki/issued/$1.crt
        echo "</cert>"
        echo "<key>"
        cat /etc/openvpn/easy-rsa/pki/private/$1.key
        echo "</key>"
        echo "<tls-auth>"
        cat /etc/openvpn/ta.key
        echo "</tls-auth>"
    } >> "$client_ovpn"
}

fun_geraovpn() {
    cd /etc/openvpn/easy-rsa/ || exit
    ./easyrsa build-client-full "$username" nopass >/dev/null 2>&1
    newclient "$username"
    if [ "$respost" == "s" ] || [ "$respost" == "S" ]; then
        sed -e "s;auth-user-pass;<auth-user-pass>\n$username\n$password\n</auth-user-pass>;" "/root/$username.ovpn" >/root/tmp.ovpn
        mv -f /root/tmp.ovpn "/root/$username.ovpn"
    fi
}

# Verifica se o arquivo de configuração do OpenVPN existe
if [[ -e /etc/openvpn/server.conf ]]; then
    _Port=$(grep -w 'port' /etc/openvpn/server.conf | awk '{print $2}')
    _portarq=$(sed -n '7 p' /etc/openvpn/client-common.txt | cut -d' ' -f3)
    hst=$(sed -n '8 p' /etc/openvpn/client-common.txt | awk '{print $4}')
    # Adicionando lógica personalizada baseada no arquivo de configuração
fi

# Função de exibição de barra de progresso
fun_bar() {
    comando[0]="$1"
    comando[1]="$2"
    (
        [[ -e $HOME/fim ]] && rm $HOME/fim
        ${comando[0]} >/dev/null 2>&1
        ${comando[1]} >/dev/null 2>&1
        touch $HOME/fim
    ) >/dev/null 2>&1 &
    tput civis
    echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    while true; do
        for ((i = 0; i < 18; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        [[ -e $HOME/fim ]] && rm $HOME/fim && break
        echo -e "\033[1;33m]"
        sleep 1s
        tput cuu1
        tput dl1
        echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
    tput cnorm
}

# Função para edição manual de host
fun_edithost() {
    clear
    echo -e "\E[44;1;37m          ALTERAR MODO OVPN            \E[0m"
    echo -ne "\033[1;32mQUAL MODO DESEJA ULTILIZAR \033[1;33m?\033[1;37m "
    read respo

    case $respo in
    1)
        echo -e "\n\033[1;32mALTERANDO MODO!\033[0m\n"
        fun_althostpay1() {
            sed -i "7,9d" $cert01
            sed -i "7i\remote $rmt2 $_Port\n$payload1\nhttp-proxy $IP 8080" $cert01
        }
        fun_bar 'fun_althostpay1'
        ;;
    2)
        echo -e "\n\033[1;32mALTERANDO MODO!\033[0m\n"
        fun_althostpay2() {
            sed -i "7,9d" $cert01
            sed -i "7i\remote $rmt2 $_Port\n$payload2\nhttp-proxy $IP 80" $cert01
        }
        fun_bar 'fun_althostpay2'
        ;;
    0)
        echo ""
        echo -e "\033[1;31mRetornando...\033[0m"
        sleep 2
        ;;
    *)
        echo -e "\033[1;31mOpção inválida!\033[0m"
        sleep 2
        fun_edithost
        ;;
    esac
}

# Parte principal do script, coleta de dados do usuário
echo -ne "\033[1;32mNome do usuário:\033[1;37m "
read username
if [[ -z $username ]]; then
    echo -e "\n${cor1}Nome de usuário vazio ou invalido!${scor}\n"
    exit 1
fi

if [[ "$(grep -wc $username /etc/passwd)" != '0' ]]; then
    echo -e "\n${cor1}Este usuário já existe. tente outro nome!${scor}\n"
    exit 1
fi

echo -ne "\033[1;32mSenha:\033[1;37m "
read -s password
echo ""
if [[ -z $password ]]; then
    echo -e "\n${cor1}Senha vazia ou invalida!${scor}\n"
    exit 1
fi

echo -ne "\033[1;32mDias para expirar:\033[1;37m "
read dias
if [[ -z $dias ]]; then
    echo -e "\n${cor1}Numero de dias vazio!${scor}\n"
    exit 1
fi

echo -ne "\033[1;32mLimite de conexões:\033[1;37m "
read sshlimiter
if [[ -z $sshlimiter ]]; then
    echo -e "\n${cor1}Você deixou o limite de conexões vazio!${scor}\n"
    exit 1
fi

# Função de criação do usuário e exibição final
clear
echo -e "\E[44;1;37m       CONTA SSH CRIADA !      \E[0m"
echo -e "\n\033[1;32mIP: \033[1;37m$IP"
echo -e "\033[1;32mUsuário: \033[1;37m$username"
echo -e "\033[1;32mSenha: \033[1;37m$password"
echo -e "\033[1;32mExpira em: \033[1;37m$gui"
echo -e "\033[1;32mLimite de conexões: \033[1;37m$sshlimiter"
