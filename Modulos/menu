#!/bin/bash
#====================================================
#	SCRIPT: INFINITENET PLUS MANAGER
#	DESENVOLVIDO POR:	ALVES_S.A
#	CONTATO TELEGRAM:	http://t.me/alves_s.a
#	CANAL TELEGRAM:	http://t.me/sshplus
#====================================================

# Função para exibir uma barra de progresso
fun_bar () {
    comando="$1"
    echo -ne "\033[1;33m["
    eval "$comando" &> /dev/null &
    local pid=$!
    while kill -0 $pid 2> /dev/null; do
        for ((i = 0 ; i < 18 ; i++)); do
            echo -ne "\033[1;31m#"
            sleep 0.1s
        done
        echo -ne "\033[1;33m]"
        sleep 1
    done
    echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
}

# Função para verificar e instalar dependências
check_dependencies() {
    for dep in screen telnet nload; do
        if ! command -v $dep &> /dev/null; then
            echo "Instalando dependência: $dep"
            apt-get install $dep -y
        fi
    done
}

# Teste de velocidade
velocity () {
    echo ""
    echo -e "   \033[1;32mTESTANDO A VELOCIDADE DO SERVIDOR!\033[0m"
    echo ""
    speedtest --share > speedtest_output.txt
    if [ $? -eq 0 ]; then
        echo -e "\033[1;32mTeste de velocidade concluído com sucesso:\033[0m"
        png=$(cat speedtest_output.txt | sed -n '5 p' | awk -F : {'print $NF'})
        down=$(cat speedtest_output.txt | sed -n '7 p' | awk -F :  {'print $NF'})
        upl=$(cat speedtest_output.txt | sed -n '9 p' | awk -F :  {'print $NF'})
        lnk=$(cat speedtest_output.txt | sed -n '10 p' | awk {'print $NF'})
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
        echo -e "\033[1;32mPING (LATENCIA):\033[1;37m$png"
        echo -e "\033[1;32mDOWNLOAD:\033[1;37m$down"
        echo -e "\033[1;32mUPLOAD:\033[1;37m$upl"
        echo -e "\033[1;32mLINK: \033[1;36m$lnk\033[0m"
        echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    else
        echo -e "\033[1;31mErro ao realizar o teste de velocidade\033[0m"
    fi
    rm -rf speedtest_output.txt
}

# Função para limitar conexões SSH
limit_ssh () {
    if [[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]]; then
        echo -e "\n\033[1;32mINICIANDO O LIMITER...\033[0m"
        fun_bar 'screen -dmS limiter limiter'
        [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
            echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
        }
        echo -e "\n\033[1;32m  LIMITER ATIVO!\033[0m"
    else
        echo -e "\n\033[1;32mPARANDO O LIMITER...\033[0m"
        fun_bar 'screen -r -S "limiter" -X quit'
        sed -i '/limiter/d' /etc/autostart
        echo -e "\n\033[1;31m LIMITER PARADO!\033[0m"
    fi
}

# Função para ativar ou desativar a autoexecução
autoexec () {
    if grep "menu;" /etc/profile > /dev/null; then
        echo -e "\033[1;32mDESATIVANDO AUTO EXECUÇÃO\033[0m"
        sed -i '/menu;/d' /etc/profile
        echo -e "\033[1;31mAUTO EXECUÇÃO DESATIVADA!\033[0m"
    else
        echo -e "\033[1;32mATIVANDO AUTO EXECUÇÃO\033[0m"
        echo "menu;" >> /etc/profile
        echo -e "\033[1;32mAUTO EXECUÇÃO ATIVADA!\033[0m"
    fi
}

# Função para exibir as informações do sistema
menu2 () {
    _ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
    _tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
    _expuser=$(cat /etc/SSHPlus/Exp 2>/dev/null || echo "0")
    _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log 2>/dev/null || echo "0")
    _ondrp=$(($(ps aux | grep dropbear | grep -v grep | wc -l) - 1 || echo "0"))
    _onli=$(($_ons + $_onop + $_ondrp))
    
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\E[41;1;37m               ⇱ INFINITENET PLUS MANAGER ⇲                \E[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo -e "\033[1;32mOnlines:\033[1;37m $_onli     \033[1;31mExpirados: \033[1;37m$_expuser \033[1;33mTotal: \033[1;37m$_tuser\033[0m"
    echo -e "\033[0;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\033[0m"
    echo ""
    echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mCRIAR USUARIO\033[1;31m"
    echo -e "[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mCRIAR USUARIO TESTE\033[1;31m"
    echo -e "[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mREMOVER USUARIO\033[1;31m"
    echo -e "[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mMONITOR ONLINE\033[1;31m"
    echo -e "[\033[1;36m11\033[1;31m] \033[1;37m• \033[1;33mSPEEDTEST\033[1;31m"
    echo -e "[\033[1;36m16\033[1;31m] \033[1;37m• \033[1;33mLIMITER\033[1;31m"
    echo -e "[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mSAIR\033[0m"
    echo ""
    echo -ne "\033[1;32mOQUE DESEJA FAZER \033[1;33m?\033[1;31m?\033[1;37m : "; read x
    case "$x" in
        1 | 01)
            clear
            criarusuario
            ;;
        2 | 02)
            clear
            criarteste
            ;;
        3 | 03)
            clear
            remover
            ;;
        4 | 04)
            clear
            sshmonitor
            ;;
        11)
            clear
            velocity
            ;;
        16)
            limit_ssh
            ;;
        00)
            echo -e "\033[1;31mSaindo...\033[0m"
            sleep 2
            clear
            exit;
            ;;
        *)
            echo -e "\n\033[1;31mOpcao invalida !\033[0m"
            sleep 2
            menu2
    esac
}

# Função principal de menu
menu () {
    check_dependencies
    while true; do
        menu2
    done
}

menu
# Fim do script
