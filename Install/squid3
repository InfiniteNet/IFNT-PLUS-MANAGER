#!/bin/bash
#-----------------------------
# squid	open source by alves.
#-----------------------------

NAME=squid
DESC="Squid HTTP Proxy"
DAEMON=/usr/sbin/squid
PIDFILE=/var/run/squid.pid
CONFIG=/etc/squid/squid.conf
SQUID_ARGS="-YC -f $CONFIG"

. /lib/lsb/init-functions

PATH=/bin:/usr/bin:/sbin:/usr/sbin

[ -x $DAEMON ] || exit 0

# Ajusta o limite de arquivos abertos
ulimit -n 65535

# Função para encontrar o diretório de cache
find_cache_dir () {
    w=" 	"
    res=`$DAEMON -k parse -f $CONFIG 2>&1 |
        grep "Processing:" |
        sed s/.*Processing:\ // |
        sed -ne '
            s/^['"$w"']*'$1'['"$w"']\+[^'"$w"']\+['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
            t end;
            d;
            :end q'`
    [ -n "$res" ] || res=$2
    echo "$res"
}

# Função para obter as configurações do Squid
grepconf () {
    w=" 	"
    res=`$DAEMON -k parse -f $CONFIG 2>&1 |
        grep "Processing:" |
        sed s/.*Processing:\ // |
        sed -ne '
            s/^['"$w"']*'$1'['"$w"']\+\([^'"$w"']\+\).*$/\1/p;
            t end;
            d;
            :end q'`
    [ -n "$res" ] || res=$2
    echo "$res"
}

# Função para criar o diretório de execução do Squid
create_run_dir () {
    run_dir=/var/run/squid
    usr=`grepconf cache_effective_user proxy`
    grp=`grepconf cache_effective_group proxy`

    if [ ! -e $run_dir ] ; then
        mkdir -p $run_dir
        chown $usr:$grp $run_dir
        [ -x /sbin/restorecon ] && restorecon $run_dir
    fi
}

# Função para iniciar o Squid
start () {
    cache_dir=`find_cache_dir cache_dir`
    cache_type=`grepconf cache_dir`
    run_dir=/var/run/squid
    create_run_dir

    if test -d "$cache_dir" -a ! -d "$cache_dir/00"
    then
        log_warning_msg "Criando estrutura de cache do $DESC"
        $DAEMON -z -f $CONFIG
        [ -x /sbin/restorecon ] && restorecon -R $cache_dir
    fi

    umask 027
    ulimit -n 65535
    cd $run_dir
    start-stop-daemon --quiet --start \
        --pidfile $PIDFILE \
        --exec $DAEMON -- $SQUID_ARGS < /dev/null
    return $?
}

# Função para parar o Squid
stop () {
    PID=`cat $PIDFILE 2>/dev/null`
    start-stop-daemon --stop --quiet --pidfile $PIDFILE --exec $DAEMON
    sleep 2
    if test -n "$PID" && kill -0 $PID 2>/dev/null
    then
        log_action_begin_msg "Esperando a parada do processo"
        cnt=0
        while kill -0 $PID 2>/dev/null
        do
            cnt=`expr $cnt + 1`
            if [ $cnt -gt 24 ]
            then
                log_action_end_msg 1
                return 1
            fi
            sleep 5
            log_action_cont_msg ""
        done
        log_action_end_msg 0
        return 0
    else
        return 0
    fi
}

cfg_pidfile=`grepconf pid_filename`
if test "${cfg_pidfile:-none}" != "none" -a "$cfg_pidfile" != "$PIDFILE"
then
    log_warning_msg "squid.conf pid_filename sobrescreve o arquivo PID padrão"
    PIDFILE="$cfg_pidfile"
fi

# Definição de casos (start, stop, reload, restart, status)
case "$1" in
    start)
        res=`$DAEMON -k parse -f $CONFIG 2>&1 | grep -o "FATAL: .*"`
        if test -n "$res";
        then
            log_failure_msg "$res"
            exit 3
        else
            log_daemon_msg "Iniciando $DESC" "$NAME"
            if start ; then
                log_end_msg $?
            else
                log_end_msg $?
            fi
        fi
        ;;
    stop)
        log_daemon_msg "Parando $DESC" "$NAME"
        if stop ; then
            log_end_msg $?
        else
            log_end_msg $?
        fi
        ;;
    reload|force-reload)
        res=`$DAEMON -k parse -f $CONFIG 2>&1 | grep -o "FATAL: .*"`
        if test -n "$res";
        then
            log_failure_msg "$res"
            exit 3
        else
            log_action_msg "Recarregando arquivos de configuração do $DESC"
            start-stop-daemon --stop --signal 1 \
                --pidfile $PIDFILE --quiet --exec $DAEMON
            log_action_end_msg 0
        fi
        ;;
    restart)
        res=`$DAEMON -k parse -f $CONFIG 2>&1 | grep -o "FATAL: .*"`
        if test -n "$res";
        then
            log_failure_msg "$res"
            exit 3
        else
            log_daemon_msg "Reiniciando $DESC" "$NAME"
            stop
            if start ; then
                log_end_msg $?
            else
                log_end_msg $?
            fi
        fi
        ;;
    status)
        status_of_proc -p $PIDFILE $DAEMON $NAME && exit 0 || exit 3
        ;;
    *)
        echo "Utilize: /etc/init.d/$NAME {start|stop|reload|force-reload|restart|status}"
        exit 3
        ;;
esac

exit 0
